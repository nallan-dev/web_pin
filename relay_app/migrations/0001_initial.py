# Generated by Django 4.1.7 on 2023-02-28 15:41

import django.db.models.deletion
from django.db import migrations, models

import relay_app.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BotConfig",
            fields=[
                (
                    "id",
                    models.TextField(
                        choices=[
                            ("TELEGRAM_TOKEN", "Telegram bot token"),
                            (
                                "ALLOWED_CLIENTS",
                                "Allowed id (separated by commas)",
                            ),
                        ],
                        help_text="Param name",
                        max_length=40,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Name",
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="Param value",
                        max_length=400,
                        verbose_name="Value",
                    ),
                ),
            ],
            options={
                "verbose_name": "Telegram bot config",
                "verbose_name_plural": "Telegram bot configs",
                "db_table": "bot_config",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="PinData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order_id",
                    models.PositiveIntegerField(
                        help_text="For ordering in list",
                        unique=True,
                        verbose_name="Index number",
                    ),
                ),
                (
                    "board_num",
                    models.PositiveIntegerField(
                        choices=[
                            (3, "BOARD-3"),
                            (5, "BOARD-5"),
                            (7, "BOARD-7"),
                            (8, "BOARD-8"),
                            (10, "BOARD-10"),
                            (11, "BOARD-11"),
                            (12, "BOARD-12"),
                            (13, "BOARD-13"),
                            (15, "BOARD-15"),
                            (16, "BOARD-16"),
                            (18, "BOARD-18"),
                            (19, "BOARD-19"),
                            (21, "BOARD-21"),
                            (22, "BOARD-22"),
                            (23, "BOARD-23"),
                            (24, "BOARD-24"),
                            (26, "BOARD-26"),
                            (29, "BOARD-29"),
                            (31, "BOARD-31"),
                            (32, "BOARD-32"),
                            (33, "BOARD-33"),
                            (35, "BOARD-35"),
                            (36, "BOARD-36"),
                            (37, "BOARD-37"),
                            (38, "BOARD-38"),
                            (40, "BOARD-40"),
                        ],
                        help_text="GPIO BOARD numbering",
                        unique=True,
                        verbose_name="Pin num (BOARD)",
                    ),
                ),
                (
                    "command",
                    models.CharField(
                        help_text='For example, "Light in the kitchen"',
                        max_length=30,
                        unique=True,
                        verbose_name="Switch name",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Optional field",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "state",
                    models.BooleanField(
                        default=False,
                        help_text="On or off",
                        verbose_name="Current state",
                    ),
                ),
                (
                    "invert_state",
                    models.BooleanField(
                        default=False,
                        help_text='Invert state at GPIO-level (e.g. "Enabled '
                        'pin" = GPIO.LOW (gnd))',
                        verbose_name="Invert state",
                    ),
                ),
                (
                    "visible",
                    models.BooleanField(
                        default=True,
                        help_text="Display in interfaces?",
                        verbose_name="Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pin config",
                "verbose_name_plural": "Pin configs",
                "db_table": "pin_data",
                "ordering": ["order_id"],
            },
        ),
        migrations.CreateModel(
            name="ScheduleData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cron_time",
                    models.CharField(
                        default="* * * * *",
                        help_text="Cron notation",
                        max_length=100,
                        validators=[relay_app.validators.validate_cron],
                        verbose_name="Trigger time",
                    ),
                ),
                (
                    "describe_cron",
                    models.TextField(
                        default="Every minute",
                        max_length=200,
                        verbose_name="Time trigger description",
                    ),
                ),
                (
                    "action",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Switch off"),
                            (1, "Switch on"),
                            (2, "Switch"),
                        ],
                        help_text="Pin action",
                        verbose_name="Action",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Is trigger active?",
                        verbose_name="Active",
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "pin_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedules",
                        to="relay_app.pindata",
                        verbose_name="Pin",
                    ),
                ),
            ],
            options={
                "verbose_name": "Schedule config",
                "verbose_name_plural": "  Schedule configs",
                "db_table": "schedule_data",
                "ordering": ["pin_data"],
            },
        ),
    ]
